// свежую версию этой функции можно скачать по адресу http://bit.ly/raw_metrika_hse
// создать пустой запрос с именем RAW_METRIKA_API и вставить в него указанный код
// для получения токена пройти по ссылке https://oauth.yandex.ru/authorize?response_type=token&client_id=1317eb8e77a94e8eb2ad32385e0eff1a
// функция может получать ответ достаточно долго (несколько минут) - это нормально для сырых данных. Уменьшите период времени или 
let
RAW_METRIKA = (dateFrom as date, dateTo as date, optional counter as number, optional token as text, optional fields as text) =>

let
    counter = if counter = null then "47656744" else Text.From(counter),
    token = if token = null then "AQAAAAAjU8NLAAFg-epsdmUtm0OfvyBdJAYYfXE" else token,
    
    header_metrika_auth = [
        #"Authorization" = "OAuth " & token,
        #"Content-Type" = "application/x-yametrika+json"
    ],
	
	fields = if fields <> null then fields else "ym:s:visitID, ym:s:dateTime, ym:s:isNewUser, ym:s:startURL, ym:s:endURL, ym:s:pageViews, ym:s:visitDuration, ym:s:bounce, ym:s:regionCountry, ym:s:regionCity, ym:s:clientID, ym:s:networkType, ym:s:goalsID, ym:s:lastTrafficSource, ym:s:lastAdvEngine, ym:s:lastReferalSource, ym:s:lastSearchEngine, ym:s:lastSocialNetwork, ym:s:lastSocialNetworkProfile, ym:s:referer, ym:s:lastDirectClickOrder, ym:s:lastDirectBannerGroup, ym:s:lastDirectClickBanner, ym:s:lastDirectClickOrderName, ym:s:lastClickBannerGroupName, ym:s:lastDirectClickBannerName, ym:s:lastDirectPhraseOrCond, ym:s:lastDirectPlatformType, ym:s:lastDirectPlatform, ym:s:UTMContent, ym:s:deviceCategory, ym:s:mobilePhone, ym:s:mobilePhoneModel, ym:s:operatingSystem, ym:s:browser, ym:s:screenWidth, ym:s:physicalScreenWidth, ym:s:windowClientWidth",
	
	dateFrom = Date.ToText(dateFrom,"yyyy-MM-dd"),
	dateTo = Date.ToText(dateTo,"yyyy-MM-dd"),
	
    // создание запроса логов
    Source = Web.Contents(
        "https://api-metrika.yandex.net/management/v1/counter/" & counter & "/logrequests", [
            Headers = header_metrika_auth,
            Query = [
                date1 = dateFrom,
                date2 = dateTo,
                fields = Text.Replace(fields," ", ""),
                source = "visits"
            ],
			ManualStatusHandling = {400},
            Content = Json.FromValue("[]")  // пустышка, чтобы GET-запрос превратился в POST                  
        ]
    ),
    metadata = Value.Metadata(Source),
    result = Json.Document(Source),
	request_id = result[log_request][request_id],
	
	LogRequest.Get = (Headers as record, RelativePath as text, IsRetry as logical) =>
	let
		Source3 = Web.Contents(
			"https://api-metrika.yandex.net/management/v1/counter/", [
				Headers = Headers,
				IsRetry = IsRetry,
				RelativePath = RelativePath               
			]
		),
		metadata3 = Value.Metadata(Source3),
		result3 = Json.Document(Source3)
	in
		if metadata3[Response.Status] = 200 then 
			try result3[log_request] otherwise Source3
		else result3,	

	LogRequest.Check = (Headers as record, counter as text, request_id as number, optional IsRetry as logical) =>
	let
		IsRetry = if IsRetry = null then false else true,
		report = 
		if IsRetry then
			Function.InvokeAfter( //проверяю готовность отчета каждые 5 секунд
				()=>LogRequest.Get(Headers, counter & "/logrequest/" & Text.From(request_id),true),
				#duration(0,0,0,5)
			)
		else LogRequest.Get(Headers, counter & "/logrequest/" & Text.From(request_id),false)
	in
		report,
	
	//жду подготовки отчета
	begin = DateTime.LocalNow(),
	test = LogRequest.Check(header_metrika_auth, counter, request_id, false),
	status = test[status],
	
	
    wait4data = 
		List.Last(
			List.Generate(
				()=>[
					state = test,
					status = status,
					s = 0,
					time = 0
				],
				each [s] < 2 and [time] < 180,
				each [
					state = LogRequest.Check(header_metrika_auth, counter, request_id, true), 
					status = state[status],
					s = if [status] = "created" then [s] else [s] + 1,
					time = Duration.Seconds(DateTime.LocalNow() - begin)
				]
			)
		),
	
	AddTime = 
		if status = "processed" then
			Record.AddField(
				test,
				"Duration",
				0
			)
		else
			Record.AddField(
				wait4data[state],
				"Duration",
				wait4data[time]
			),

	//распаковываю отчет
	parts = Table.AddColumn(
		Table.FromRecords(AddTime[parts]), 
		"part_content", 
		each LogRequest.Get(
			Record.AddField(header_metrika_auth, "Accept-Encoding", "gzip"),
			counter & "/logrequest/" & Text.From(request_id) & "/part/" & Text.From([part_number]) & "/download",
			false
		)
	),
	unpack = Table.TransformColumns(
		parts,
		{
			"part_content", 
			each Table.PromoteHeaders(
				Csv.Document(_,AddTime[fields],"#(tab)")
			)
		}
	),
	expand = Table.SelectColumns(
		Table.ExpandTableColumn(unpack, "part_content", AddTime[fields], AddTime[fields]),
		AddTime[fields]
	)
	
in
	if metadata[Response.Status] = 400 then
		result[errors]{0}
    else
		expand,
		
	yesterday = Date.AddDays(DateTime.Date(DateTime.LocalNow()),-1),	
	fnType = type function(

        dateFrom as (type date 
			meta [
				Documentation.FieldCaption = "Дата начала интервала:",
				Documentation.SampleValues = {yesterday}
			]
		),
		dateTo as (type date 
			meta [
				Documentation.FieldCaption = "Дата окончания интервала:",
				//Documentation.FieldDescription = "Select concepts https://tech.yandex.ru/direct/doc/ref-v5/concepts/about-docpage/",
				//Documentation.AllowedValues = {"Campaigns","AdGroups","Ads","Keywords"},
				Documentation.SampleValues = {yesterday}
			]
		),
        optional counter as (type number 
			meta [
				Documentation.FieldCaption = "Номер счетчика Яндекс.Метрики:",
				Documentation.SampleValues = {12345678}
			]
		),
	optional token as (type text 
			meta [
				Documentation.FieldCaption = "Ключ авторизации:",
				Documentation.SampleValues = {"AQAAAAA______________________hu6mY"}
			]
		),
        optional fields as (type text
			meta [
				Documentation.FieldCaption = "Список полей через запятую:"
				//Documentation.FieldDescription = "Перечислите поля через запятую. Список допустимых полей находится здесь: https://tech.yandex.ru/metrika/doc/api2/logs/fields/visits-docpage/"
			]
		)
	) as text 
		meta [
			Documentation.Name = "RAW_METRIKA_API",
			Documentation.LongDescription = "С помощью Logs API извлекает неагрегированные данные Яндекс.Метрики за указанных диапазон времени по выбранным полям. Список допустимых полей находится здесь: https://tech.yandex.ru/metrika/doc/api2/logs/fields/visits-docpage/. Для получения токена пройти по ссылке https://oauth.yandex.ru/authorize?response_type=token&client_id=1317eb8e77a94e8eb2ad32385e0eff1a. ВНИМАНИЕ! Если указать большой диапазон и много параметров, выполнение функции может затянуться.",
			Documentation.Examples = {
				[
					Description = "Получить неагрегированные данные за вчерашний день по странице входа, кол-ву просмотренных страниц в течение визита и продолжительностью визита",
					Code = "RAW_METRIKA_API(12345678, ""AQAAAAA______________________hu6mY"", #date("&Text.From(Date.Year(yesterday))&","&Text.From(Date.Month(yesterday))&","&Text.From(Date.Day(yesterday))&"),#date("&Text.From(Date.Year(yesterday))&","&Text.From(Date.Month(yesterday))&","&Text.From(Date.Day(yesterday))&"),""ym:s:startURL, ym:s:pageViews, ym:s:visitDuration"")",
					Result = "Таблица с колонками: ""ym:s:startURL"",""ym:s:pageViews"",""ym:s:visitDuration"", в строках которой будут указаны характеристики каждого из визитов. В случае ошибки будет выведена информация о ней. Для получения колонок, установленных по-умолчанию, оставье поле ""Список полей"" пустым. Список полей по-умолчанию редактируйте в коде функции."
				]
			}
	] 
in
    Value.ReplaceType(RAW_METRIKA, fnType)
